// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) // Adicionado
  updatedAt         DateTime @updatedAt // Adicionado

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) // Adicionado
  updatedAt    DateTime @updatedAt // Adicionado
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("USER")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now()) // Adicionado
  updatedAt     DateTime @updatedAt // Adicionado
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) // Adicionado
  updatedAt  DateTime @updatedAt // Adicionado

  @@unique([identifier, token])
}

model Menu {
  // Não faz sentido adicionar os campos de tempo, pois esta tabela é estática
  // e representa uma única configuração que é apenas atualizada.
  id        Int      @id @default(1)
  logoUrl   String?
  links     Json
}

model Banner {
  // Mesmo caso de Menu. É uma tabela de configuração.
  id        Int      @id @default(1)
  banners   Json
}

model HomepageSection {
  id        String   @id @default(cuid())
  type      String
  order     Int
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Adicionado para permitir soft delete de seções
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  type      String   // Pode ser "TEXT", "PHOTO", ou "VIDEO"
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Adicionado para soft delete
}

model FAQ {
  id        String   @id @default(cuid())
  pergunta  String
  resposta  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Adicionado para soft delete
}

// prisma/schema.prisma

model Colecao {
  id          String        @id @default(cuid())
  title       String
  subtitle    String?
  description String?
  bgcolor     String?
  buttonText  String?
  buttonUrl   String?
  items       ColecaoItem[]
  createdAt   DateTime      @default(now()) // Adicionado para ordenação por criação
  updatedAt   DateTime      @updatedAt // Adicionado para controle de atualização
  deletedAt   DateTime?     // Adicionado para soft delete
}

model ColecaoItem {
  id           String    @id @default(cuid())
  productMark  String
  productModel String
  cor          String
  img          String
  slug         String    @unique
  colecao      Colecao   @relation(fields: [colecaoId], references: [id], onDelete: Cascade)
  colecaoId    String
  createdAt    DateTime  @default(now()) // Adicionado para ordenação por criação
  updatedAt    DateTime  @updatedAt // Adicionado para controle de atualização
  deletedAt    DateTime? // Adicionado para soft delete
}